name: Deploy to VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

      - name: Deploy to VM
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
        run: |
          # Determine the inactive directory and port
          ssh -i private_key -o StrictHostKeyChecking=no $VM_USER@$VM_HOST << 'EOF'
            if [ -f ~/active_dir ]; then
              ACTIVE_DIR=$(cat ~/active_dir)
              if [ "$ACTIVE_DIR" = "blue" ]; then
                NEW_DIR="green"
                NEW_PORT=3001
                OLD_PORT=3000
              else
                NEW_DIR="blue"
                NEW_PORT=3000
                OLD_PORT=3001
              fi
            else
              # Default to blue if no active directory is set
              NEW_DIR="blue"
              NEW_PORT=3000
              OLD_PORT=3001
            fi

            # Create the directory for the app and remove old files
            mkdir -p ~/simple-backend-api-$NEW_DIR
            rm -rf ~/simple-backend-api-$NEW_DIR/*

            echo $NEW_DIR $NEW_PORT $OLD_PORT
          EOF
        id: setup

      - name: Get directory and ports
        id: vars
        run: echo "::set-output name=new_dir::$(cat private_key)"

      - name: Copy files to VM
        run: |
          NEW_DIR=$(echo "${{ steps.setup.outputs.stdout }}" | awk '{print $1}')
          scp -i private_key -o StrictHostKeyChecking=no -r ./* $VM_USER@$VM_HOST:~/simple-backend-api-$NEW_DIR

      - name: Install dependencies and start app
        run: |
          NEW_DIR=$(echo "${{ steps.setup.outputs.stdout }}" | awk '{print $1}')
          NEW_PORT=$(echo "${{ steps.setup.outputs.stdout }}" | awk '{print $2}')
          OLD_PORT=$(echo "${{ steps.setup.outputs.stdout }}" | awk '{print $3}')
          
          ssh -i private_key -o StrictHostKeyChecking=no $VM_USER@$VM_HOST << EOF
            cd ~/simple-backend-api-$NEW_DIR
            
            # Install dependencies
            npm install

            # Start the app on the new port
            nohup npm start --port $NEW_PORT &

            # Wait for the new app to be up and running
            sleep 10

            # Update the active directory and port
            echo $NEW_DIR > ~/active_dir

            # Optionally, stop the old instance
            if [ "$ACTIVE_DIR" = "blue" ]; then
              pkill -f "node .*--port 3001" || true
            else
              pkill -f "node .*--port 3000" || true
            fi
          EOF
